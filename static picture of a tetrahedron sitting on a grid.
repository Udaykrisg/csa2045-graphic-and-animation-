#include &lt;GL/glut.h&gt;
void display() {
glClear(GL_COLOR_BUFFER_BIT);

glColor3f(1.0, 1.0, 1.0);
glBegin(GL_LINES);
for (GLfloat i = -2.5; i &lt;= 2.5; i += 0.25) {
glVertex3f(i, 0, 2.5); glVertex3f(i, 0, -2.5);
glVertex3f(2.5, 0, i); glVertex3f(-2.5, 0, i);
}
glEnd();
glBegin(GL_TRIANGLE_STRIP);
glColor3f(1, 1, 1); glVertex3f(0, 2, 0);
glColor3f(1, 0, 0); glVertex3f(-1, 0, 1);
glColor3f(0, 1, 0); glVertex3f(1, 0, 1);
glColor3f(0, 0, 1); glVertex3f(0, 0, -1.4);
glColor3f(1, 1, 1); glVertex3f(0, 2, 0);
glColor3f(1, 0, 0); glVertex3f(-1, 0, 1);
glEnd();
glFlush();
}
void init() {

glClearColor(0.1, 0.39, 0.88, 1.0);
glColor3f(1.0, 1.0, 1.0);

glEnable(GL_CULL_FACE);

glCullFace(GL_BACK);

glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glFrustum(-2, 2, -1.5, 1.5, 1, 40);
Page 23 of 56

glClearColor(0, 0, 0, 1);

glMatrixMode(GL_PROJECTION);

glOrtho(-500, 500,-500, 500, -500, 500);

}

void display()

{

glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);

glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);

glEnable(GL_DEPTH_TEST);

glutInitWindowPosition(500,100);

glutInitWindowSize(1000,750);

glutCreateWindow(&quot;3D Transformations&quot;);

init();

// Drawing initial polygon

glColor3f(0, 0, 1);

glLineWidth(2.0);

// TOP BAEF

glBegin(GL_LINE_LOOP);

glVertex3f(x[1], y[1], z[1]);

glVertex3f(x[0], y[0], z[0]);

glVertex3f(x[4], y[4], z[4]);

glVertex3f(x[5], y[5], z[5]);

glEnd();

// BOTTOM GHDC

glBegin(GL_LINE_LOOP);

glVertex3f(x[6], y[6], z[6]);

glVertex3f(x[7], y[7], z[7]);

glVertex3f(x[3], y[3], z[3]);

glVertex3f(x[2], y[2], z[2]);

glEnd();

// FRONT FEHG

glBegin(GL_LINE_LOOP);

glVertex3f(x[5], y[5], z[5]);

glVertex3f(x[4], y[4], z[4]);

glVertex3f(x[7], y[7], z[7]);

glVertex3f(x[6], y[6], z[6]);

glEnd();

// BACK CDAB

glBegin(GL_LINE_LOOP);

glVertex3f(x[2], y[2], z[2]);

glVertex3f(x[3], y[3], z[3]);

glVertex3f(x[0], y[0], z[0]);

glVertex3f(x[1], y[1], z[1]);

glEnd();

// LEFT EADH

glBegin(GL_LINE_LOOP);
Page 24 of 56

glVertex3f(x[4], y[4], z[4]);

glVertex3f(x[0], y[0], z[0]);

glVertex3f(x[3], y[3], z[3]);

glVertex3f(x[7], y[7], z[7]);

glEnd();

// RIGHT BFGC

glBegin(GL_LINE_LOOP);

glVertex3f(x[1], y[1], z[1]);

glVertex3f(x[5], y[5], z[5]);

glVertex3f(x[6], y[6], z[6]);

glVertex3f(x[2], y[2], z[2]);

glEnd();

// Drawing polygon after transformation

glColor3f(1, 0, 0);

glLineWidth(2.0);

// TOP BAEF

glBegin(GL_LINE_LOOP);

glVertex3f(xaux[1], yaux[1], zaux[1]);

glVertex3f(xaux[0], yaux[0], zaux[0]);

glVertex3f(xaux[4], yaux[4], zaux[4]);

glVertex3f(xaux[5], yaux[5], zaux[5]);

glEnd();

// BOTTOM GHDC

glBegin(GL_LINE_LOOP);

glVertex3f(xaux[6], yaux[6], zaux[6]);

glVertex3f(xaux[7], yaux[7], zaux[7]);

glVertex3f(xaux[3], yaux[3], zaux[3]);

glVertex3f(xaux[2], yaux[2], zaux[2]);

glEnd();

// FRONT FEHG

glBegin(GL_LINE_LOOP);

glVertex3f(xaux[5], yaux[5], zaux[5]);

glVertex3f(xaux[4], yaux[4], zaux[4]);

glVertex3f(xaux[7], yaux[7], zaux[7]);

glVertex3f(xaux[6], yaux[6], zaux[6]);

glEnd();

// BACK CDAB

glBegin(GL_LINE_LOOP);

glVertex3f(xaux[2], yaux[2], zaux[2]);

glVertex3f(xaux[3], yaux[3], zaux[3]);

glVertex3f(xaux[0], yaux[0], zaux[0]);

glVertex3f(xaux[1], yaux[1], zaux[1]);

glEnd();

// LEFT EADH

glBegin(GL_LINE_LOOP);

glVertex3f(xaux[4], yaux[4], zaux[4]);

glVertex3f(xaux[0], yaux[0], zaux[0]);
Page 25 of 56

glVertex3f(xaux[3], yaux[3], zaux[3]);

glVertex3f(xaux[7], yaux[7], zaux[7]);

glEnd();

// RIGHT BFGC

glBegin(GL_LINE_LOOP);

glVertex3f(xaux[1], yaux[1], zaux[1]);

glVertex3f(xaux[5], yaux[5], zaux[5]);

glVertex3f(xaux[6], yaux[6], zaux[6]);

glVertex3f(xaux[2], yaux[2], zaux[2]);

glEnd();

glFlush();

glutMainLoop();

}

void translation()

{

printf(&quot;\n\nTRANSLATION\n&quot;);

int T[3];

printf(&quot;Enter translation factor (dx dy dz): &quot;);

scanf(&quot;%d%d%d&quot;,&amp;T[0],&amp;T[1],&amp;T[2]);

for(i=0; i&lt;8; i++)

{

xaux[i] = x[i] + T[0];

yaux[i] = y[i] + T[1];

zaux[i] = z[i] + T[2];

}

display();

}

void rotation()

{

int angle;

printf(&quot;\n\nOPERATIONS FOR ROTATION\n\n1. About X-AXIS\n2. About Y-AXIS\n3. About Z-

AXIS\n\nEnter your choice: &quot;);

scanf(&quot;%d&quot;,&amp;choice1);

printf(&quot;Enter angle of rotation (in degree): &quot;);

scanf(&quot;%d&quot;,&amp;angle);

switch(choice1)

{

case 1:

{

printf(&quot;\n\nROTATION ABOUT X-AXIS\n&quot;);

for(i=0; i&lt;8; i++)

{

xaux[i] = x[i];

yaux[i] = (y[i] * cos(angle * 3.14/180)) - (z[i] * sin(angle * 3.14/180));

zaux[i] = (y[i] * sin(angle * 3.14/180)) + (z[i] * cos(angle * 3.14/180));

}

display();

}

case 2:
First 30 Manual.docx

glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glTranslatef(0, 0, -3);
glRotatef(50, 1, 0, 0);
glRotatef(70, 0, 1, 0);
}

int main(int argc, char** argv) {
glutInit(&amp;argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowPosition(80, 80);
glutInitWindowSize(800, 600);
glutCreateWindow(&quot;A Simple Tetrahedron&quot;);
glutDisplayFunc(display);
init();
glutMainLoop();
}
